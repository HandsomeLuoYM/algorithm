package com.algorithm.two_zero_two_one.february.翻转图像;

/**
 * @author Ming
 * @date 2021/2/24 - 0:22
 * @describe
 */
public class LeetCode {
    /**
     * 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。
     *
     * 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。
     *
     * 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。
     *
     * 示例 1:
     *
     * 输入: [[1,1,0],[1,0,1],[0,0,0]]
     * 输出: [[1,0,0],[0,1,0],[1,1,1]]
     * 解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
     *      然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
     * 示例 2:
     *
     * 输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
     * 输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
     * 解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
     *      然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
     *
     */
    /**
     * 思路：就地转换
     * 执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗：38.4 MB, 在所有 Java 提交中击败了92.48%的用户
     */
    public int[][] flipAndInvertImage(int[][] A) {
        int row = A.length, cell = A[0].length, head, tail;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < cell/2; j++) {
                //翻转交换
                head = - (A[i][j] - 1);
                tail = - (A[i][cell - j - 1] - 1);
                A[i][j] = tail;
                A[i][cell - j - 1] = head;
            }
            if (cell % 2 == 1) A[i][cell / 2] = -(A[i][cell / 2] - 1);
        }
        return A;
    }
}
